1 пошук дублікатів і null серед ID

SELECT
cst_id,
COUNT(*) NUM
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*)>1 or cst_id IS NULL

2 Пошук значень з пробілами (очистка даних)

SELECT cst_firstname
FROM bronze.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

3 Пошук різних значень і зведення їх до однакових і зрозумілих (стандартизація)

SELECT distinct(cst_gndr)
FROM bronze.crm_cust_info

4 Розділення строки або видобуток значень з заміною значень (приводимо таблицю фактів до таблиці вимірів)

REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_')

SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key

5 Пошук негативних значень або НАЛС

SELECT prd_cost
FROM bronze.crm_prd_info
WHERE prd_cost<0 OR prd_cost IS NULL

6 Calculate end date as one day before the next start date
		CAST(
				LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 
				AS DATE
			) AS prd_end_dt -- Calculate end date as one day before the next start date

7 Пошук непослідовних дат

SELECT *
FROM bronze.crm_prd_info
WHERE prd_end_dt<prd_start_dt


8 Перетворення дат (також перевіряємо межі дат і правильність послідовності дат)
SELECT  
       DISTINCT bdate
  FROM [DataWarehouse].[bronze].erp_cust_az12
  WHERE bdate<'1920-01-01' OR bdate>getdate()

CASE 
	WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)

9 Перевірка значень і обчислень
SELECT  
       [sls_sales]
      ,[sls_quantity]
      ,[sls_price]
  FROM [DataWarehouse].[bronze].[crm_sales_details]
  WHERE sls_sales != sls_price*sls_quantity 
  OR sls_price IS NULL OR sls_sales IS NULL OR sls_quantity IS NULL
  OR sls_price <=0 OR sls_sales <=0 OR sls_quantity <=0


CASE 
				WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price) 
					THEN sls_quantity * ABS(sls_price)
				ELSE sls_sales
			END AS sls_sales, -- Recalculate sales if original value is missing or incorrect
			sls_quantity,
			CASE 
				WHEN sls_price IS NULL OR sls_price <= 0 
					THEN sls_sales / NULLIF(sls_quantity, 0)
				ELSE sls_price  -- Derive price if original value is invalid
			END AS sls_price

10 Видалення частини рядків

CASE
				WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid)) -- Remove 'NAS' prefix if present
				ELSE cid

11 Обробка багатьох неправильних значень
ПЕРЕВІРКА ЧЕРЕЗ DISTINCT

CASE
				WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
				ELSE 'n/a'
